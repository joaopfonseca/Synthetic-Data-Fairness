Metric,overall,gender_priv,gender_priv_correct,gender_priv_incorrect,gender_dis,gender_dis_correct,gender_dis_incorrect,Model_Name,Model_Params,Virny_Random_State,Runtime_in_Mins
Std,0.015264278098131086,0.014858291402582588,0.014625532724581848,0.015458840316701875,0.015479699610054777,0.015313797105795104,0.01591220730519031,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Overall_Uncertainty,0.9367001255878702,0.9392993565430223,0.9304824929045972,0.9620480588877628,0.9353209418157487,0.9246788257540391,0.9630649298269875,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Statistical_Bias,0.42918613265159206,0.432497998269206,0.3727386148580561,0.5866853012916536,0.42742881620142964,0.3677846168828382,0.5829211958409272,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
IQR,0.01764340401414825,0.017879833280095212,0.017310274692564406,0.019349371577042637,0.01751795175058456,0.01716890936866564,0.01842790495944077,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Mean_Prediction,0.503143143767891,0.5028551472637963,0.4987808558693539,0.5133673708842198,0.5032959582394516,0.5015322771286944,0.5078938734763047,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Aleatoric_Uncertainty,0.9360063838993222,0.9386468114124497,0.9298468595051516,0.9613518792003547,0.9346053407290914,0.9239718575573427,0.9623268228031473,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Epistemic_Uncertainty,0.0006937416885479664,0.0006525451305726682,0.000635633399445612,0.0006961796874080939,0.0007156010866572471,0.0007069681966964669,0.000738107023840251,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Label_Stability,0.9414499089253188,0.9441782261454392,0.9617381160688246,0.8988713318284424,0.9400022304003569,0.9589569510877951,0.8905872888173774,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Jitter,0.04824772313296903,0.04573350147120638,0.03149606299212599,0.08246802106847254,0.049581799933088,0.03391451936429563,0.0904263877715205,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
TPR,0.6575080811049074,0.6561844863731656,1.0,0.0,0.658222121691925,1.0,0.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
TNR,0.785518138459315,0.7855035819637589,1.0,0.0,0.7855257369115706,1.0,0.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
PPV,0.7509649270011747,0.7545805207328833,1.0,0.0,0.749034749034749,1.0,0.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
FNR,0.34249191889509256,0.3438155136268344,0.0,1.0,0.3417778783080751,0.0,1.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
FPR,0.21448186154068508,0.21449641803624103,0.0,1.0,0.2144742630884294,0.0,1.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Accuracy,0.722040072859745,0.7206809583858764,1.0,0.0,0.7227612356417977,1.0,0.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
F1,0.7011359185272229,0.7019511101143754,1.0,0.0,0.7006982903924873,1.0,0.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Selection-Rate,0.4341712204007286,0.4358974358974359,0.4564012831729367,0.3829947328818661,0.4332552693208431,0.44900478321246723,0.3921962992759453,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
Sample_Size,13725.0,4758.0,3429.0,1329.0,8967.0,6481.0,2486.0,CONST_GC|PREP|LR,"{'memory': None, 'steps': [('GC', SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542)), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'GC': SDVGenerator(constraints=[{'constraint_class': 'Inequality',
                           'constraint_parameters': {'high_column_name': 'ap_hi',
                                                     'low_column_name': 'ap_lo',
                                                     'strict_boundaries': True}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_name': 'age',
                                                     'relation': '>=',
                                                     'value': 29}},
                          {'constraint_class': 'ScalarInequality',
                           'constraint_parameters': {'column_n...
                                   'cholesterol': {'sdtype': 'categorical'},
                                   'gender': {'sdtype': 'categorical'},
                                   'gluc': {'sdtype': 'categorical'},
                                   'height': {'sdtype': 'numerical'},
                                   'smoke': {'sdtype': 'categorical'},
                                   'target': {'sdtype': 'categorical'},
                                   'weight': {'sdtype': 'numerical'}}},
             model=<class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>,
             model_params={'default_distribution': 'beta'},
             random_state=1608637542), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'GC__constraints': [{'constraint_class': 'Inequality', 'constraint_parameters': {'low_column_name': 'ap_lo', 'high_column_name': 'ap_hi', 'strict_boundaries': True}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '>=', 'value': 29}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'age', 'relation': '<=', 'value': 65}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '>=', 'value': 100}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'height', 'relation': '<=', 'value': 250}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'weight', 'relation': '<=', 'value': 200}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '>=', 'value': 60}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_hi', 'relation': '<=', 'value': 300}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '>=', 'value': 30}}, {'constraint_class': 'ScalarInequality', 'constraint_parameters': {'column_name': 'ap_lo', 'relation': '<=', 'value': 150}}], 'GC__metadata': {'columns': {'age': {'sdtype': 'numerical'}, 'gender': {'sdtype': 'categorical'}, 'height': {'sdtype': 'numerical'}, 'weight': {'sdtype': 'numerical'}, 'ap_hi': {'sdtype': 'numerical'}, 'ap_lo': {'sdtype': 'numerical'}, 'cholesterol': {'sdtype': 'categorical'}, 'gluc': {'sdtype': 'categorical'}, 'smoke': {'sdtype': 'categorical'}, 'alco': {'sdtype': 'categorical'}, 'active': {'sdtype': 'categorical'}, 'target': {'sdtype': 'categorical'}}, 'METADATA_SPEC_VERSION': 'SINGLE_TABLE_V1'}, 'GC__model': <class 'sdv.single_table.copulas.GaussianCopulaSynthesizer'>, 'GC__model_params': {'default_distribution': 'beta'}, 'GC__n_rows': None, 'GC__random_state': 1608637542, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,3.3287145666666667
