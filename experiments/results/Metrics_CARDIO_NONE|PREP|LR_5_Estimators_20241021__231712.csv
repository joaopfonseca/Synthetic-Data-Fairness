Metric,overall,gender_priv,gender_priv_correct,gender_priv_incorrect,gender_dis,gender_dis_correct,gender_dis_incorrect,Model_Name,Model_Params,Virny_Random_State,Runtime_in_Mins
Std,0.00730999757286658,0.008172167950650849,0.007920745414214048,0.008853872113407726,0.006852519413225949,0.006634999613349471,0.007431122080897381,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Overall_Uncertainty,0.8093951220298143,0.815641520194517,0.7919567200403173,0.879860213904344,0.8060807066771151,0.7764438165621518,0.8849148343829173,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Statistical_Bias,0.3754175628816362,0.3799467157969608,0.2767435355610038,0.6597706272635652,0.37301433888574964,0.2686784829538972,0.650547715664477,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
IQR,0.007855904488196008,0.008577878722665843,0.008201638311188815,0.009598012630851608,0.007472816118885485,0.0072661590298823756,0.008022523975633756,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Mean_Prediction,0.5054398197659147,0.5054390103619443,0.49832479681254416,0.5247284068500214,0.5054402492455724,0.5018731511969272,0.5149287300549682,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Aleatoric_Uncertainty,0.809171555250702,0.8153586088464815,0.791680406826635,0.8795594124509951,0.8058886288529415,0.7762562260000797,0.8847108204415538,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Epistemic_Uncertainty,0.0002235667791123941,0.0002829113480354861,0.0002763132136822666,0.00030080145334887565,0.00019207782417351993,0.0001875905620720708,0.00020401394136349005,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Label_Stability,0.9831548269581056,0.9840269020596889,0.9880322209436134,0.9731669266770671,0.9826920932307348,0.9886450820929876,0.966857142857143,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Jitter,0.014134790528233151,0.013493064312736443,0.01001150747986191,0.02293291731669267,0.01447529831604773,0.00945220193340494,0.027836734693877548,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
TPR,0.6630913899500441,0.6658280922431866,1.0,0.0,0.6616150192264194,1.0,0.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
TNR,0.7920219684925567,0.7956173619890434,1.0,0.0,0.7901451825780906,1.0,0.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
PPV,0.7582325268817204,0.7660395561987458,1.0,0.0,0.7540603248259861,1.0,0.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
FNR,0.3369086100499559,0.33417190775681344,0.0,1.0,0.33838498077358065,0.0,1.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
FPR,0.20797803150744326,0.2043826380109566,0.0,1.0,0.20985481742190937,0.0,1.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Accuracy,0.728087431693989,0.7305590584279109,1.0,0.0,0.726775956284153,1.0,0.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
F1,0.7074776610754037,0.7124270973530731,1.0,0.0,0.7048192771084337,1.0,0.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Selection-Rate,0.43366120218579235,0.43568726355611603,0.4568469505178366,0.3783151326053042,0.43258614921378385,0.44882614700015344,0.3893877551020408,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
Sample_Size,13725.0,4758.0,3476.0,1282.0,8967.0,6517.0,2450.0,NONE|PREP|LR,"{'memory': None, 'steps': [('NONE', FunctionTransformer()), ('PREP', ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])])), ('LR', LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'))], 'verbose': False, 'NONE': FunctionTransformer(), 'PREP': ColumnTransformer(force_int_remainder_cols=False, remainder=StandardScaler(),
                  transformers=[('OHE',
                                 OneHotEncoder(handle_unknown='infrequent_if_exist',
                                               sparse_output=False),
                                 ['gender', 'cholesterol', 'gluc', 'smoke',
                                  'alco', 'active'])]), 'LR': LogisticRegression(C=0.1, max_iter=10000, penalty='l1', random_state=1608637542,
                   solver='saga'), 'NONE__accept_sparse': False, 'NONE__check_inverse': True, 'NONE__feature_names_out': None, 'NONE__func': None, 'NONE__inv_kw_args': None, 'NONE__inverse_func': None, 'NONE__kw_args': None, 'NONE__validate': False, 'PREP__force_int_remainder_cols': False, 'PREP__n_jobs': None, 'PREP__remainder__copy': True, 'PREP__remainder__with_mean': True, 'PREP__remainder__with_std': True, 'PREP__remainder': StandardScaler(), 'PREP__sparse_threshold': 0.3, 'PREP__transformer_weights': None, 'PREP__transformers': [('OHE', OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'])], 'PREP__verbose': False, 'PREP__verbose_feature_names_out': True, 'PREP__OHE': OneHotEncoder(handle_unknown='infrequent_if_exist', sparse_output=False), 'PREP__OHE__categories': 'auto', 'PREP__OHE__drop': None, 'PREP__OHE__dtype': <class 'numpy.float64'>, 'PREP__OHE__feature_name_combiner': 'concat', 'PREP__OHE__handle_unknown': 'infrequent_if_exist', 'PREP__OHE__max_categories': None, 'PREP__OHE__min_frequency': None, 'PREP__OHE__sparse_output': False, 'LR__C': 0.1, 'LR__class_weight': None, 'LR__dual': False, 'LR__fit_intercept': True, 'LR__intercept_scaling': 1, 'LR__l1_ratio': None, 'LR__max_iter': 10000, 'LR__multi_class': 'deprecated', 'LR__n_jobs': None, 'LR__penalty': 'l1', 'LR__random_state': 1608637542, 'LR__solver': 'saga', 'LR__tol': 0.0001, 'LR__verbose': 0, 'LR__warm_start': False}",42,0.8306934833333333
